name: Publish Latest Cyclus

on:
  # allows us to run workflows manually
  workflow_dispatch:
  pull_request:
    paths:
      - '.github/workflows/publish_latest.yml'
  push:
    branches:
      - main

jobs:
  build-ubuntu-img:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        ubuntu_versions : [
          20.04,
          22.04,
          24.04,
        ]
        pkg_mgr : [
          apt,
          conda,
        ]

    name: Publish Ubuntu Latest
    steps:
      - name: Tag as ci-image-cache
        run: |
          echo "tag=ci-image-cache" >> "$GITHUB_ENV"

      - name: Tag as latest
        if: ${{ github.repository_owner == 'cyclus' && github.ref == 'refs/heads/main' }}
        run: |
          echo "tag=latest" >> "$GITHUB_ENV"

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout Cyclus
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, Test, and Push Cyclus
        id: build-cyclus
        uses: docker/build-push-action@v5
        with:
          cache-from: type=registry,ref=ghcr.io/cyclus/cyclus_${{ matrix.ubuntu_versions }}_${{ matrix.pkg_mgr }}/cyclus:ci-layer-cache
          cache-to: type=registry,ref=ghcr.io/cyclus/cyclus_${{ matrix.ubuntu_versions }}_${{ matrix.pkg_mgr }}/cyclus:ci-layer-cache,mode=max
          file: docker/Dockerfile
          push: true
          tags: ghcr.io/cyclus/cyclus_${{ matrix.ubuntu_versions }}_${{ matrix.pkg_mgr }}/cyclus:${{ env.tag }}
          build-args: |
            pkg_mgr=${{ matrix.pkg_mgr }}
            ubuntu_version=${{ matrix.ubuntu_versions }}

      - name: Checkout Cycamore
        uses: actions/checkout@v4
        with:
          repository: cyclus/cycamore
          path: ${{ github.workspace }}/cycamore
    
      - name: Build, Test, and Push Cycamore
        id: build-cycamore
        continue-on-error: true
        uses: docker/build-push-action@v5
        with:
          context: ${{ github.workspace }}/cycamore
          file: ${{ github.workspace }}/cycamore/docker/Dockerfile
          cache-from: type=registry,ref=ghcr.io/cyclus/cycamore_${{ matrix.ubuntu_versions }}_${{ matrix.pkg_mgr }}/cycamore:ci-layer-cache
          tags: ghcr.io/cyclus/cycamore_${{ matrix.ubuntu_versions }}_${{ matrix.pkg_mgr }}/cycamore:${{ env.tag }}
          push: true
          build-args: |
            pkg_mgr=${{ matrix.pkg_mgr }}
            ubuntu_version=${{ matrix.ubuntu_versions }}
            cyclus_tag=${{ env.tag }}@${{ steps.build-cyclus.outputs.digest }}

      - name: Checkout Cymetric
        uses: actions/checkout@v4
        with:
          repository: cyclus/cymetric
          path: ${{ github.workspace }}/cymetric

      - name: Build, Test, and Push Cymetric
        continue-on-error: true
        uses: docker/build-push-action@v5
        with:
          context: ${{ github.workspace }}/cymetric
          file: ${{ github.workspace }}/cymetric/docker/Dockerfile
          cache-from: type=registry,ref=ghcr.io/cyclus/cymetric_${{ matrix.ubuntu_versions }}_${{ matrix.pkg_mgr }}/cymetric:ci-layer-cache
          tags: ghcr.io/cyclus/cymetric_${{ matrix.ubuntu_versions }}_${{ matrix.pkg_mgr }}/cymetric:${{ env.tag }}
          push: true
          build-args: |
            pkg_mgr=${{ matrix.pkg_mgr }}
            ubuntu_version=${{ matrix.ubuntu_versions }}
            cycamore_tag=${{ env.tag }}@${{ steps.build-cycamore.outputs.digest }}

  build-rocky-img:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        rocky_versions : [
          8,
          9,
        ]

    name: Publish Rocky Latest
    steps:
      - name: Tag as ci-image-cache
        run: |
          echo "tag=ci-image-cache" >> "$GITHUB_ENV"

      - name: Tag as latest
        if: ${{ github.repository_owner == 'cyclus' && github.ref == 'refs/heads/main' }}
        run: |
          echo "tag=latest" >> "$GITHUB_ENV"

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout Cyclus
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, Test, and Push Cyclus
        id: build-cyclus
        uses: docker/build-push-action@v5
        with:
          cache-from: type=registry,ref=ghcr.io/cyclus/cyclus_rocky_${{ matrix.rocky_versions }}/cyclus:ci-layer-cache
          cache-to: type=registry,ref=ghcr.io/cyclus/cyclus_rocky_${{ matrix.rocky_versions }}/cyclus:ci-layer-cache,mode=max
          file: docker/Rocky.dockerfile
          push: true
          tags: ghcr.io/cyclus/cyclus_rocky_${{ matrix.rocky_versions }}/cyclus:${{ env.tag }}
          build-args: |
            rocky_version=${{ matrix.rocky_versions }}


  trigger-feedstock-ci:
    permissions:
      contents: write
      pull-requests: write
    # if: github.event.workflow == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Install GitHub CLI
        run: |
          (type -p wget >/dev/null || (sudo apt update && sudo apt-get install wget -y)) \
          && sudo mkdir -p -m 755 /etc/apt/keyrings \
          && wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null \
          && sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      - name: Checkout cyclus-feedstock
        uses: actions/checkout@v4
        with:
          repository: bennibbelink/cyclus-feedstock
          token: ${{ secrets.FEEDSTOCK_TOKEN }}

      - name: Sync fork
        env:
          GH_TOKEN: ${{ secrets.FEEDSTOCK_TOKEN }}
        run: |
          gh repo sync bennibbelink/cyclus-feedstock -b main
          gh repo sync bennibbelink/cyclus-feedstock -b dev

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: "3.12"
          miniforge-version: "latest"
          conda-solver: "libmamba"
          auto-update-conda: true
          channels: conda-forge

      - name: Increment build number and rerender
        shell: bash -el {0}
        run: |
          mamba install -y conda-smithy
          BUILD_NUMBER=$(sed -n 's/^[[:space:]]*number:[[:space:]]*\([0-9][0-9]*\).*/\1/p' recipe/meta.yaml)
          NEW_BUILD_NUMBER=$((BUILD_NUMBER + 1))
          echo "NEW_BUILD_NUMBER=${NEW_BUILD_NUMBER}"
          sed -i "s/^\([[:space:]]*number:[[:space:]]*\)[0-9][0-9]*/\1$NEW_BUILD_NUMBER/" recipe/meta.yaml
          conda-smithy rerender

      - name: PR cyclus-feedstock
        env:
          GH_TOKEN: ${{ secrets.FEEDSTOCK_TOKEN }}
        shell: bash -el {0}
        run: |
          SHORT_SHA=$(echo ${{github.sha}} | cut -c1-7)
          NEW_BRANCH=cyclus-${SHORT_SHA}
          echo ${SHORT_SHA}
          echo ${NEW_BRANCH}
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout -b ${NEW_BRANCH}
          git add .
          git commit -m "Trigger build for Cyclus commit ${SHORT_SHA}"
          git push --set-upstream origin ${NEW_BRANCH}
          gh pr create \
            --repo conda-forge/cyclus-feedstock \
            --base dev \
            --draft \
            --label automerge \
            --title "Cyclus commit `main - ${SHORT_SHA}`" \
            --body "Auto-triggered PR from push to Cyclus `main` branch.  If CI passes this will be merged automatically."