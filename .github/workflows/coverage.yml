name: Code Coverage

on:
  # allows us to run workflows manually
  workflow_dispatch:
  pull_request:
    paths:
      - 'src/**'
      - 'tests/**'
  push:
    paths:
      - 'src/**'
      - 'tests/**'
    branches:
      - 'main'

jobs:
  generate-report:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        ubuntu_versions : [
          # 20.04,
          22.04,
          ]
        pkg_mgr : [
            apt,
            # conda
        ]
    
    container:
      image: ghcr.io/cyclus/cyclus_${{ matrix.ubuntu_versions }}_${{ matrix.pkg_mgr }}/${{ matrix.pkg_mgr }}-deps

    steps:
      - name: Checkout and Build Cyclus
        uses: actions/checkout@v3

      - name: Building Cyclus
        run: |
          mkdir -p `python -m site --user-site`
          python install.py -j 2 --build-type=Release --core-version 999999.999999 --code_coverage
          echo "PATH=${HOME}/.local/bin:$PATH" >> "$GITHUB_ENV"
          echo "LD_LIBRARY_PATH=${HOME}/.local/lib:${HOME}/.local/lib/cyclus:$LD_LIBRARY_PATH" >> "$GITHUB_ENV"

      - name: Cyclus Unit Tests
        run: |
          cyclus_unit_tests

      - name: Cyclus Python Tests
        run: |
          cd tests && python -m pytest --ignore test_main.py

      - name: Generate Coverage Report
        run: |
          apt install -y lcov
          lcov -c --rc lcov_branch_coverage=1 -d build/src -o ${HOME}/cyclus_coverage.info
          lcov --remove ${HOME}/cyclus_coverage.info "/usr/*"
          {
            echo 'COVERAGE_SUMMARY<<EOF'
            echo "Code Coverage Summary (${{ matrix.ubuntu_versions}}, ${{ matrix.pkg_mgr }})"
            lcov --summary ${HOME}/cyclus_coverage.info
            echo EOF
          } >> "$GITHUB_ENV"
          mkdir -p ${HOME}/cyclus_coverage/html
          genhtml ${HOME}/cyclus_coverage.info --output-directory ${HOME}/cyclus_coverage/html
          echo "artifactPath=${HOME}/cyclus_coverage/html/" >> $GITHUB_ENV
        
      - name: Upload Coverage Report Artifact
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: ${{ env.artifactPath }}

      - name: Comment Coverage Summary to PR Discussion
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v6
        env:
          COMMENT_BODY: '${{ env.COVERAGE_SUMMARY }}'
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { COMMENT_BODY } = process.env;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${COMMENT_BODY}`
            })


  deploy:
    if: ${{ github.event_name == 'pull_request' }}
    needs: generate-report
    permissions:
      pages: write  
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
        with:
          artifact_name: code-coverage-report
