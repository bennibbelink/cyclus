name: Downstream Testing

on:
  workflow_dispatch:
  pull_request:
    paths-ignore:
      - '.github/workflows/build_test.yml'
      - '.github/workflows/build_test_publish.yml'
      - '.github/workflows/changelog_test.yml'
      - 'doc/**'
      - 'CHANGELOG.rst'
  push:
    paths-ignore:
      - '.github/workflows/build_test.yml'
      - '.github/workflows/build_test_publish.yml'
      - '.github/workflows/changelog_test.yml'
      - 'doc/**'
      - 'CHANGELOG.rst'

jobs:
  build-test-cyclus:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        ubuntu_versions:
          - 20.04
          - 22.04
        pkg_mgr:
          - apt
          - conda

    name: Build Cyclus Docker Image
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          push: false
          tags: ghcr.io/cyclus/cyclus_${{ matrix.ubuntu_versions }}_${{ matrix.pkg_mgr }}/cyclus
          outputs: type=docker,dest=/tmp/cyclus-${{ matrix.ubuntu_versions }}-${{ matrix.pkg_mgr }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: cyclus-${{ matrix.ubuntu_versions }}-${{ matrix.pkg_mgr }}
          path: /tmp/cyclus-${{ matrix.ubuntu_versions }}-${{ matrix.pkg_mgr }}.tar

  build-test-cycamore:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        ubuntu_versions:
          - 20.04
          - 22.04
        pkg_mgr:
          - apt
          - conda

    needs: build-test-cyclus

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: cyclus-${{ matrix.ubuntu_versions }}-${{ matrix.pkg_mgr }}
          path: /tmp

      - name: Load Cyclus Docker Image
        run: |
          docker load --input /tmp/cyclus-${{ matrix.ubuntu_versions }}-${{ matrix.pkg_mgr }}.tar

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: cyclus/cycamore

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          push: false
          tags: ghcr.io/cyclus/cycamore_${{ matrix.ubuntu_versions }}_${{ matrix.pkg_mgr }}/cycamore
          outputs: type=docker,dest=/tmp/cycamore-${{ matrix.ubuntu_versions }}-${{ matrix.pkg_mgr }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: cycamore-${{ matrix.ubuntu_versions }}-${{ matrix.pkg_mgr }}
          path: /tmp/cycamore-${{ matrix.ubuntu_versions }}-${{ matrix.pkg_mgr }}.tar

  build-test-cymetric:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        ubuntu_versions:
          - 20.04
          - 22.04
        pkg_mgr:
          - apt
          - conda

    needs: [build-test-cyclus, build-test-cycamore]

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: cycamore-${{ matrix.ubuntu_versions }}-${{ matrix.pkg_mgr }}
          path: /tmp

      - name: Load Cycamore Docker Image
        run: |
          docker load --input /tmp/cycamore-${{ matrix.ubuntu_versions }}-${{ matrix.pkg_mgr }}.tar

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: cyclus/cymetric

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          push: false
          tags: ghcr.io/cyclus/cymetric_${{ matrix.ubuntu_versions }}_${{ matrix.pkg_mgr }}/cymetric
          outputs: type=docker,dest=/tmp/cymetric-${{ matrix.ubuntu_versions }}-${{ matrix.pkg_mgr }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: cymetric-${{ matrix.ubuntu_versions }}-${{ matrix.pkg_mgr }}
          path: /tmp/cymetric-${{ matrix.ubuntu_versions }}-${{ matrix.pkg_mgr }}.tar